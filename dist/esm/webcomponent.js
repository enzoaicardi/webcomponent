class t extends Error{constructor(t){super(t)}}class e extends t{constructor(t,e){super(`Missing property ${t} on ${e.name}`),this.name="PropertyRequiredError"}}const s="undefined"==typeof document,i=!s,r=s?class{}:HTMLElement,n=s?null:document.createElement("template"),c=new Set,o=t=>{if(i&&t){if(!t.tagName)throw new e("static tagName",t);c.has(t)||(c.add(t),customElements.define(t.tagName,t))}},h=(t,e,s)=>`<${e}${s?Object.entries(s).reduce(((t,[e,s])=>t+` ${e}="${s}"`),""):""}>${t}</${e}>`;class a{static t=Symbol();static i=Symbol()}class u extends r{static tagName;static define=o;static createElement(...t){return o(this),new this(...t)}static createRaw(...t){return o(this),new this(...t).toString()}properties;[a.i]=Object.getPrototypeOf(this).constructor;[a.t](t){const e=this,s=(t=>n?(n.innerHTML=t,n.content):null)(t),i=this.properties;if(i)for(const t in i)e.setAttribute(t,i[t]);s&&e.appendChild(s)}constructor(){super()}connectedCallback(){const t=this;if(!t.childNodes.length)if(this.render)this[a.t](this.render());else if(this.renderAsync)return this.renderAsync().then((e=>(this[a.t](e),t)));return Promise.resolve(t)}toString(){const t=this.properties,s=this[a.i],i=s.tagName;if(!i)throw new e("static tagName",s);if(this.render)return h(this.render(),i,t);if(this.renderAsync)return this.renderAsync().then((e=>h(e,i,t)));throw new e("render | renderAsync",s)}[Symbol.toPrimitive](){if(this.render)return h(this.render(),this[a.i].tagName,this.properties);throw new e("render",this[a.i])}}export{u as WebComponent,i as isClient,s as isServer};
