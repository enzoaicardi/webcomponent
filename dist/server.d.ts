// Generated by dts-bundle-generator v9.5.1

declare const ServerWebComponent_base: {
	new (...args: any[]): {
		definition: any;
		render?(): string;
		renderAsync?(): Promise<string>;
		toString(): string | Promise<string>;
		[Symbol.toPrimitive](): string;
		attributes: NamedNodeMap | ServerNamedNodeMap;
	};
	tagName: string;
} & (new (...args: any[]) => {
	attributes: NamedNodeMap | ServerNamedNodeMap;
});
declare class ServerWebComponent extends ServerWebComponent_base {
	/**
	 * The ServerNamedNodeMap interface represents a collection of
	 * attributes
	 */
	attributes: ServerNamedNodeMap;
	/**
	 * Allows for manipulation of element's class content attribute
	 * as a set of whitespace-separated tokens through a
	 * ServerDOMTokenList object.
	 */
	classList: ServerDOMTokenList;
	/**
	 * The read-only style property of the HTMLElement returns
	 * the inline style of an element in the form of a live
	 * ServerCSSStyleDeclaration object that contains a list
	 * of all styles properties
	 */
	style: ServerCSSStyleDeclaration;
	constructor();
	/**
	 * Sets the value of element's first attribute whose qualified
	 * name is qualifiedName to value.
	 */
	setAttribute(qualifiedName: string, value: unknown): void;
	/**
	 * Returns element's first attribute whose qualified name is
	 * qualifiedName, and null if there is no such attribute otherwise.
	 */
	getAttribute(qualifiedName: string): string | null;
	/**
	 * Returns true if element has an attribute whose qualified
	 * name is qualifiedName, and false otherwise.
	 */
	hasAttribute(qualifiedName: string): boolean;
	/**
	 * Removes element's first attribute whose qualified name
	 * is qualifiedName.
	 */
	removeAttribute(qualifiedName: string): void;
}
declare class ServerNamedNodeMap implements Record<string, unknown> {
	[key: string]: unknown;
	[Symbol.iterator](): Generator<{
		name: string;
		value: unknown;
	}, void, unknown>;
}
declare class ServerDOMTokenList extends Set<string> {
	constructor(className?: string);
	/** @ts-ignore */
	add(...tokens: string[]): void;
	remove(...tokens: string[]): void;
	toggle(token: string, force?: boolean): boolean;
	replace(oldToken: string, newToken: string): void;
	item(token: string): number;
	contains: (value: string) => boolean;
	get length(): number;
	get value(): string;
	[Symbol.toPrimitive](): string;
}
export type ServerCSSStyleDeclaration = {
	[key in keyof Omit<CSSStyleDeclaration, "setProperty" | "getPropertyCSSValue" | "getPropertyPriority" | "getPropertyValue" | "item">]?: unknown;
} & {
	length: number;
	cssText: string;
	parentRule: null;
	removeProperty(property: string): void;
	[Symbol.toPrimitive](): string;
};
declare function ServerCSSStyleDeclaration(cssRules?: string): void;
declare namespace ServerCSSStyleDeclaration {
	var prototype: ServerCSSStyleDeclaration;
}

export {
	ServerWebComponent as WebComponent,
};

export {};
